// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/27/2019 15:22:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_sample_tst(
	CIN,
	IN1,
	IN2,
	OP,
	sampler_tx
);
input  CIN;
input [15:0] IN1;
input [15:0] IN2;
input [2:0] OP;
output sampler_tx;

reg sample;
time current_time;
always @(CIN or IN1 or IN2 or OP)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_vlg_check_tst (
	ALUOUT,
	COUT,
	sampler_rx
);
input [15:0] ALUOUT;
input  COUT;
input sampler_rx;

reg [15:0] ALUOUT_expected;
reg  COUT_expected;

reg [15:0] ALUOUT_prev;
reg  COUT_prev;

reg [15:0] ALUOUT_expected_prev;
reg  COUT_expected_prev;

reg [15:0] last_ALUOUT_exp;
reg  last_COUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUOUT_prev = ALUOUT;
	COUT_prev = COUT;
end

// update expected /o prevs

always @(trigger)
begin
	ALUOUT_expected_prev = ALUOUT_expected;
	COUT_expected_prev = COUT_expected;
end


// expected ALUOUT[ 15 ]
initial
begin
	ALUOUT_expected[15] = 1'bX;
end 
// expected ALUOUT[ 14 ]
initial
begin
	ALUOUT_expected[14] = 1'bX;
end 
// expected ALUOUT[ 13 ]
initial
begin
	ALUOUT_expected[13] = 1'bX;
end 
// expected ALUOUT[ 12 ]
initial
begin
	ALUOUT_expected[12] = 1'bX;
end 
// expected ALUOUT[ 11 ]
initial
begin
	ALUOUT_expected[11] = 1'bX;
end 
// expected ALUOUT[ 10 ]
initial
begin
	ALUOUT_expected[10] = 1'bX;
end 
// expected ALUOUT[ 9 ]
initial
begin
	ALUOUT_expected[9] = 1'bX;
end 
// expected ALUOUT[ 8 ]
initial
begin
	ALUOUT_expected[8] = 1'bX;
end 
// expected ALUOUT[ 7 ]
initial
begin
	ALUOUT_expected[7] = 1'bX;
end 
// expected ALUOUT[ 6 ]
initial
begin
	ALUOUT_expected[6] = 1'bX;
end 
// expected ALUOUT[ 5 ]
initial
begin
	ALUOUT_expected[5] = 1'bX;
end 
// expected ALUOUT[ 4 ]
initial
begin
	ALUOUT_expected[4] = 1'bX;
end 
// expected ALUOUT[ 3 ]
initial
begin
	ALUOUT_expected[3] = 1'bX;
end 
// expected ALUOUT[ 2 ]
initial
begin
	ALUOUT_expected[2] = 1'bX;
end 
// expected ALUOUT[ 1 ]
initial
begin
	ALUOUT_expected[1] = 1'bX;
end 
// expected ALUOUT[ 0 ]
initial
begin
	ALUOUT_expected[0] = 1'bX;
end 

// expected COUT
initial
begin
	COUT_expected = 1'bX;
end 
// generate trigger
always @(ALUOUT_expected or ALUOUT or COUT_expected or COUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUOUT = %b | expected COUT = %b | ",ALUOUT_expected_prev,COUT_expected_prev);
	$display("| real ALUOUT = %b | real COUT = %b | ",ALUOUT_prev,COUT_prev);
`endif
	if (
		( ALUOUT_expected_prev[0] !== 1'bx ) && ( ALUOUT_prev[0] !== ALUOUT_expected_prev[0] )
		&& ((ALUOUT_expected_prev[0] !== last_ALUOUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[0] = ALUOUT_expected_prev[0];
	end
	if (
		( ALUOUT_expected_prev[1] !== 1'bx ) && ( ALUOUT_prev[1] !== ALUOUT_expected_prev[1] )
		&& ((ALUOUT_expected_prev[1] !== last_ALUOUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[1] = ALUOUT_expected_prev[1];
	end
	if (
		( ALUOUT_expected_prev[2] !== 1'bx ) && ( ALUOUT_prev[2] !== ALUOUT_expected_prev[2] )
		&& ((ALUOUT_expected_prev[2] !== last_ALUOUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[2] = ALUOUT_expected_prev[2];
	end
	if (
		( ALUOUT_expected_prev[3] !== 1'bx ) && ( ALUOUT_prev[3] !== ALUOUT_expected_prev[3] )
		&& ((ALUOUT_expected_prev[3] !== last_ALUOUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[3] = ALUOUT_expected_prev[3];
	end
	if (
		( ALUOUT_expected_prev[4] !== 1'bx ) && ( ALUOUT_prev[4] !== ALUOUT_expected_prev[4] )
		&& ((ALUOUT_expected_prev[4] !== last_ALUOUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[4] = ALUOUT_expected_prev[4];
	end
	if (
		( ALUOUT_expected_prev[5] !== 1'bx ) && ( ALUOUT_prev[5] !== ALUOUT_expected_prev[5] )
		&& ((ALUOUT_expected_prev[5] !== last_ALUOUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[5] = ALUOUT_expected_prev[5];
	end
	if (
		( ALUOUT_expected_prev[6] !== 1'bx ) && ( ALUOUT_prev[6] !== ALUOUT_expected_prev[6] )
		&& ((ALUOUT_expected_prev[6] !== last_ALUOUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[6] = ALUOUT_expected_prev[6];
	end
	if (
		( ALUOUT_expected_prev[7] !== 1'bx ) && ( ALUOUT_prev[7] !== ALUOUT_expected_prev[7] )
		&& ((ALUOUT_expected_prev[7] !== last_ALUOUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[7] = ALUOUT_expected_prev[7];
	end
	if (
		( ALUOUT_expected_prev[8] !== 1'bx ) && ( ALUOUT_prev[8] !== ALUOUT_expected_prev[8] )
		&& ((ALUOUT_expected_prev[8] !== last_ALUOUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[8] = ALUOUT_expected_prev[8];
	end
	if (
		( ALUOUT_expected_prev[9] !== 1'bx ) && ( ALUOUT_prev[9] !== ALUOUT_expected_prev[9] )
		&& ((ALUOUT_expected_prev[9] !== last_ALUOUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[9] = ALUOUT_expected_prev[9];
	end
	if (
		( ALUOUT_expected_prev[10] !== 1'bx ) && ( ALUOUT_prev[10] !== ALUOUT_expected_prev[10] )
		&& ((ALUOUT_expected_prev[10] !== last_ALUOUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[10] = ALUOUT_expected_prev[10];
	end
	if (
		( ALUOUT_expected_prev[11] !== 1'bx ) && ( ALUOUT_prev[11] !== ALUOUT_expected_prev[11] )
		&& ((ALUOUT_expected_prev[11] !== last_ALUOUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[11] = ALUOUT_expected_prev[11];
	end
	if (
		( ALUOUT_expected_prev[12] !== 1'bx ) && ( ALUOUT_prev[12] !== ALUOUT_expected_prev[12] )
		&& ((ALUOUT_expected_prev[12] !== last_ALUOUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[12] = ALUOUT_expected_prev[12];
	end
	if (
		( ALUOUT_expected_prev[13] !== 1'bx ) && ( ALUOUT_prev[13] !== ALUOUT_expected_prev[13] )
		&& ((ALUOUT_expected_prev[13] !== last_ALUOUT_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[13] = ALUOUT_expected_prev[13];
	end
	if (
		( ALUOUT_expected_prev[14] !== 1'bx ) && ( ALUOUT_prev[14] !== ALUOUT_expected_prev[14] )
		&& ((ALUOUT_expected_prev[14] !== last_ALUOUT_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[14] = ALUOUT_expected_prev[14];
	end
	if (
		( ALUOUT_expected_prev[15] !== 1'bx ) && ( ALUOUT_prev[15] !== ALUOUT_expected_prev[15] )
		&& ((ALUOUT_expected_prev[15] !== last_ALUOUT_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUT_exp[15] = ALUOUT_expected_prev[15];
	end
	if (
		( COUT_expected_prev !== 1'bx ) && ( COUT_prev !== COUT_expected_prev )
		&& ((COUT_expected_prev !== last_COUT_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUT_expected_prev);
		$display ("     Real value = %b", COUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUT_exp = COUT_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CIN;
reg [15:0] IN1;
reg [15:0] IN2;
reg [2:0] OP;
// wires                                               
wire [15:0] ALUOUT;
wire COUT;

wire sampler;                             

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.ALUOUT(ALUOUT),
	.CIN(CIN),
	.COUT(COUT),
	.IN1(IN1),
	.IN2(IN2),
	.OP(OP)
);

// CIN
initial
begin
	CIN = 1'b0;
end 
// IN1[ 15 ]
initial
begin
	IN1[15] = 1'b0;
end 
// IN1[ 14 ]
initial
begin
	IN1[14] = 1'b0;
end 
// IN1[ 13 ]
initial
begin
	IN1[13] = 1'b0;
end 
// IN1[ 12 ]
initial
begin
	IN1[12] = 1'b0;
end 
// IN1[ 11 ]
initial
begin
	IN1[11] = 1'b0;
end 
// IN1[ 10 ]
initial
begin
	IN1[10] = 1'b0;
end 
// IN1[ 9 ]
initial
begin
	IN1[9] = 1'b0;
end 
// IN1[ 8 ]
initial
begin
	IN1[8] = 1'b0;
end 
// IN1[ 7 ]
initial
begin
	IN1[7] = 1'b1;
end 
// IN1[ 6 ]
initial
begin
	IN1[6] = 1'b0;
end 
// IN1[ 5 ]
initial
begin
	IN1[5] = 1'b1;
end 
// IN1[ 4 ]
initial
begin
	IN1[4] = 1'b0;
end 
// IN1[ 3 ]
initial
begin
	IN1[3] = 1'b1;
end 
// IN1[ 2 ]
initial
begin
	IN1[2] = 1'b0;
end 
// IN1[ 1 ]
initial
begin
	IN1[1] = 1'b1;
end 
// IN1[ 0 ]
initial
begin
	IN1[0] = 1'b0;
end 
// IN2[ 15 ]
initial
begin
	IN2[15] = 1'b0;
end 
// IN2[ 14 ]
initial
begin
	IN2[14] = 1'b0;
end 
// IN2[ 13 ]
initial
begin
	IN2[13] = 1'b0;
end 
// IN2[ 12 ]
initial
begin
	IN2[12] = 1'b0;
end 
// IN2[ 11 ]
initial
begin
	IN2[11] = 1'b0;
end 
// IN2[ 10 ]
initial
begin
	IN2[10] = 1'b0;
end 
// IN2[ 9 ]
initial
begin
	IN2[9] = 1'b0;
end 
// IN2[ 8 ]
initial
begin
	IN2[8] = 1'b0;
end 
// IN2[ 7 ]
initial
begin
	IN2[7] = 1'b1;
end 
// IN2[ 6 ]
initial
begin
	IN2[6] = 1'b1;
end 
// IN2[ 5 ]
initial
begin
	IN2[5] = 1'b0;
end 
// IN2[ 4 ]
initial
begin
	IN2[4] = 1'b0;
end 
// IN2[ 3 ]
initial
begin
	IN2[3] = 1'b1;
end 
// IN2[ 2 ]
initial
begin
	IN2[2] = 1'b1;
end 
// IN2[ 1 ]
initial
begin
	IN2[1] = 1'b0;
end 
// IN2[ 0 ]
initial
begin
	IN2[0] = 1'b0;
end 
// OP[ 2 ]
initial
begin
	OP[2] = 1'b0;
	OP[2] = #600000 1'b1;
end 
// OP[ 1 ]
initial
begin
	OP[1] = 1'b0;
	OP[1] = #300000 1'b1;
	OP[1] = #300000 1'b0;
end 
// OP[ 0 ]
initial
begin
	OP[0] = 1'b0;
	OP[0] = #150000 1'b1;
	OP[0] = #150000 1'b0;
	OP[0] = #150000 1'b1;
	OP[0] = #150000 1'b0;
	OP[0] = #150000 1'b1;
end 

CPU_vlg_sample_tst tb_sample (
	.CIN(CIN),
	.IN1(IN1),
	.IN2(IN2),
	.OP(OP),
	.sampler_tx(sampler)
);

CPU_vlg_check_tst tb_out(
	.ALUOUT(ALUOUT),
	.COUT(COUT),
	.sampler_rx(sampler)
);
endmodule

